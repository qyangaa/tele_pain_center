[{"/home/arkyyang/files/webdev/tele_pain_center/src/index.js":"1","/home/arkyyang/files/webdev/tele_pain_center/src/App.js":"2","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/calendar.jsx":"3","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/providers.jsx":"4","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/tracking.jsx":"5","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/notFound.jsx":"6","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/records.jsx":"7","/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/navBar.jsx":"8","/home/arkyyang/files/webdev/tele_pain_center/src/services/providerService.js":"9","/home/arkyyang/files/webdev/tele_pain_center/src/services/FilterService.js":"10","/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/searchBox.jsx":"11","/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/CollapsibleList.jsx":"12","/home/arkyyang/files/webdev/tele_pain_center/src/components/common/cardDeck.jsx":"13","/home/arkyyang/files/webdev/tele_pain_center/src/services/data/providerData.js":"14","/home/arkyyang/files/webdev/tele_pain_center/src/components/common/cardItem.jsx":"15","/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/Pagination.jsx":"16","/home/arkyyang/files/webdev/tele_pain_center/src/utils/paginate.js":"17","/home/arkyyang/files/webdev/tele_pain_center/src/services/authService.js":"18","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Registration.jsx":"19","/home/arkyyang/files/webdev/tele_pain_center/src/contexts/AuthContext.js":"20","/home/arkyyang/files/webdev/tele_pain_center/src/services/Firebase/firebase.js":"21","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Login.jsx":"22","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Dashboard.jsx":"23","/home/arkyyang/files/webdev/tele_pain_center/src/components/common/ProtectedRoute.jsx":"24","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/ForgotPassword.jsx":"25","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/UpdateProfile.jsx":"26","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Chat.jsx":"27","/home/arkyyang/files/webdev/tele_pain_center/src/components/common/Message.js":"28","/home/arkyyang/files/webdev/tele_pain_center/src/services/ChatService.js":"29","/home/arkyyang/files/webdev/tele_pain_center/src/redux/configureStore.js":"30","/home/arkyyang/files/webdev/tele_pain_center/src/redux/filtersReducer.js":"31","/home/arkyyang/files/webdev/tele_pain_center/src/redux/providersReducer.js":"32","/home/arkyyang/files/webdev/tele_pain_center/src/services/data/filtersData.js":"33","/home/arkyyang/files/webdev/tele_pain_center/src/redux/ActionTypes.js":"34","/home/arkyyang/files/webdev/tele_pain_center/src/components/common/Loading.jsx":"35","/home/arkyyang/files/webdev/tele_pain_center/src/redux/ProvidersActions.js":"36","/home/arkyyang/files/webdev/tele_pain_center/src/redux/ProvidersActionCreators.js":"37","/home/arkyyang/files/webdev/tele_pain_center/src/redux/messagesReducer.js":"38","/home/arkyyang/files/webdev/tele_pain_center/src/redux/chatGroupsReducer.js":"39","/home/arkyyang/files/webdev/tele_pain_center/src/redux/ChatActions.js":"40","/home/arkyyang/files/webdev/tele_pain_center/src/redux/ChatActionCreator.js":"41","/home/arkyyang/files/webdev/tele_pain_center/src/redux/curGroupReducer.js":"42","/home/arkyyang/files/webdev/tele_pain_center/src/redux/UserActions.js":"43","/home/arkyyang/files/webdev/tele_pain_center/src/redux/UserActionCreator.js":"44","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/NewProvider.jsx":"45","/home/arkyyang/files/webdev/tele_pain_center/src/redux/reducers/index.js":"46","/home/arkyyang/files/webdev/tele_pain_center/src/redux/reducers/dashboardReducer.js":"47","/home/arkyyang/files/webdev/tele_pain_center/src/redux/actions/dashboardAction.js":"48","/home/arkyyang/files/webdev/tele_pain_center/src/services/data/dummyDataGenerator.js":"49","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/ProvidersMap.jsx":"50","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/AppointmentModal.jsx":"51","/home/arkyyang/files/webdev/tele_pain_center/src/services/AppointmentService.js":"52"},{"size":213,"mtime":1612030951480,"results":"53","hashOfConfig":"54"},{"size":2769,"mtime":1614812208064,"results":"55","hashOfConfig":"54"},{"size":885,"mtime":1614821264169,"results":"56","hashOfConfig":"54"},{"size":7515,"mtime":1615334795482,"results":"57","hashOfConfig":"54"},{"size":1553,"mtime":1613430453077,"results":"58","hashOfConfig":"54"},{"size":111,"mtime":1612030951480,"results":"59","hashOfConfig":"54"},{"size":174,"mtime":1612030951480,"results":"60","hashOfConfig":"54"},{"size":1065,"mtime":1612030951476,"results":"61","hashOfConfig":"54"},{"size":2506,"mtime":1615326645357,"results":"62","hashOfConfig":"54"},{"size":816,"mtime":1612030951480,"results":"63","hashOfConfig":"54"},{"size":507,"mtime":1614389181543,"results":"64","hashOfConfig":"54"},{"size":1434,"mtime":1614129401812,"results":"65","hashOfConfig":"54"},{"size":279,"mtime":1614895097279,"results":"66","hashOfConfig":"54"},{"size":3538,"mtime":1612030951480,"results":"67","hashOfConfig":"54"},{"size":1513,"mtime":1614895131691,"results":"68","hashOfConfig":"54"},{"size":1593,"mtime":1614289017957,"results":"69","hashOfConfig":"54"},{"size":193,"mtime":1612030951480,"results":"70","hashOfConfig":"54"},{"size":2225,"mtime":1614378522452,"results":"71","hashOfConfig":"54"},{"size":3217,"mtime":1613248844431,"results":"72","hashOfConfig":"54"},{"size":2283,"mtime":1612030951480,"results":"73","hashOfConfig":"54"},{"size":1230,"mtime":1612030951480,"results":"74","hashOfConfig":"54"},{"size":2673,"mtime":1613248608372,"results":"75","hashOfConfig":"54"},{"size":1099,"mtime":1612030951480,"results":"76","hashOfConfig":"54"},{"size":461,"mtime":1612030951480,"results":"77","hashOfConfig":"54"},{"size":1992,"mtime":1612030951480,"results":"78","hashOfConfig":"54"},{"size":3094,"mtime":1612030951480,"results":"79","hashOfConfig":"54"},{"size":4569,"mtime":1614812183285,"results":"80","hashOfConfig":"54"},{"size":589,"mtime":1612030951480,"results":"81","hashOfConfig":"54"},{"size":3146,"mtime":1614812463605,"results":"82","hashOfConfig":"54"},{"size":1048,"mtime":1613429188812,"results":"83","hashOfConfig":"54"},{"size":183,"mtime":1612030951480,"results":"84","hashOfConfig":"54"},{"size":1071,"mtime":1615328990951,"results":"85","hashOfConfig":"54"},{"size":718,"mtime":1614390017422,"results":"86","hashOfConfig":"54"},{"size":966,"mtime":1615328281352,"results":"87","hashOfConfig":"54"},{"size":224,"mtime":1612030951476,"results":"88","hashOfConfig":"54"},{"size":290,"mtime":1615328219158,"results":"89","hashOfConfig":"54"},{"size":806,"mtime":1615328287520,"results":"90","hashOfConfig":"54"},{"size":687,"mtime":1612030951480,"results":"91","hashOfConfig":"54"},{"size":669,"mtime":1612030951480,"results":"92","hashOfConfig":"54"},{"size":492,"mtime":1612030951480,"results":"93","hashOfConfig":"54"},{"size":1361,"mtime":1612030951480,"results":"94","hashOfConfig":"54"},{"size":678,"mtime":1612030951480,"results":"95","hashOfConfig":"54"},{"size":258,"mtime":1612030951480,"results":"96","hashOfConfig":"54"},{"size":578,"mtime":1612030951480,"results":"97","hashOfConfig":"54"},{"size":7489,"mtime":1614378723017,"results":"98","hashOfConfig":"54"},{"size":225,"mtime":1613428924893,"results":"99","hashOfConfig":"54"},{"size":454,"mtime":1613428863371,"results":"100","hashOfConfig":"54"},{"size":838,"mtime":1613430369203,"results":"101","hashOfConfig":"54"},{"size":4159,"mtime":1614378717913,"results":"102","hashOfConfig":"54"},{"size":2639,"mtime":1614815115055,"results":"103","hashOfConfig":"54"},{"size":3174,"mtime":1615334797854,"results":"104","hashOfConfig":"54"},{"size":1003,"mtime":1615334505887,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"3ue2e5",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"108"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"108"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"108"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"108"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"108"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"108"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"108"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"108"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"108"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"108"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"108"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"108"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"108"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"108"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/arkyyang/files/webdev/tele_pain_center/src/index.js",[],["230","231"],"/home/arkyyang/files/webdev/tele_pain_center/src/App.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/calendar.jsx",["232"],"import React, { Component } from \"react\";\nimport * as BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"./Calendar.css\";\n\n//  business logic:\n// provider side: set available time slot, see self events\n// patient side: get available time slot of provider, see events of self\n// make appointment:\n//      provider: remove time slot, add event with patient name\n//      patient: add event with provider name\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\nexport default function Calendar() {\n  const events = [\n    {\n      allDay: false,\n      title: \"Event\",\n      start: new Date(2021, 2, 3, 17, 0, 0, 0),\n      end: new Date(2021, 2, 3, 18, 0, 0, 0),\n    },\n  ];\n  return (\n    <div>\n      <BigCalendar.Calendar\n        localizer={localizer}\n        events={events}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n      />\n    </div>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/providers.jsx",["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247"],"/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/tracking.jsx",["248"],"import React, { useState, useEffect } from \"react\";\nimport \"./tracking.css\";\n\n// Redux components\nimport { sendData, getData } from \"../../redux/actions/dashboardAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function Tracking() {\n  const responseToPost = useSelector(\n    (state) => state.dashboardReducer.dataFromBackend.express\n  );\n  const [post, setPost] = useState(\"\");\n  const response = useSelector(\n    (state) => state.dashboardReducer.getDataFromBackend.express\n  );\n  const dispatch = useDispatch();\n\n  const callApi = async () => {\n    getData(\"/api/hello\")(dispatch);\n  };\n\n  useEffect(() => {\n    callApi();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    sendData(\"/api/data\", { post })(dispatch);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <p>{response}</p>\n      <form onSubmit={handleSubmit}>\n        <p>\n          <strong>Post to Server:</strong>\n        </p>\n        <input\n          type=\"text\"\n          value={post}\n          onChange={(e) => setPost(e.target.value)}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      <p style={{ color: \"blue\" }}>\n        <b>{responseToPost}</b>\n      </p>\n    </div>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/notFound.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/records.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/navBar.jsx",["249"],"import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Tracking from \"../pages/tracking\";\nimport { RiLoginCircleLine, RiMedicineBottleFill } from \"react-icons/ri\";\n\nconst NavBar = ({ user }) => {\n  return (\n    <Navbar expand=\"lg\">\n      <Navbar.Brand href=\"#home\">\n        <RiMedicineBottleFill />\n        Tele Pain Center\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/tracking\">Tracking</Nav.Link>\n          <Nav.Link href=\"/search\">Search Providers</Nav.Link>\n          <Nav.Link href=\"/calendar\">Calendar</Nav.Link>\n          <Nav.Link href=\"/Records\">Records</Nav.Link>\n          <Nav.Link href=\"/Chat\">Chat</Nav.Link>\n        </Nav>\n        <Nav.Link href=\"/registration\" className=\"icon\">\n          <RiLoginCircleLine />\n        </Nav.Link>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","/home/arkyyang/files/webdev/tele_pain_center/src/services/providerService.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/services/FilterService.js",["250"],"import React from \"react\";\nconst filters = [\n  {\n    _id: \"specialty\",\n    title: \"Specialty\",\n    options: [\n      {\n        name: \"fibromyalgia\",\n        _id: \"fibromyalgia\",\n      },\n      {\n        name: \"arthritis\",\n        _id: \"arthritis\",\n      },\n      {\n        name: \"Pain Psychology\",\n        _id: \"pain_phychology\",\n      },\n      {\n        name: \"Occupational Therapy\",\n        _id: \"occupational_therapy\",\n      },\n      {\n        name: \"Physical Therapy\",\n        _id: \"physical_therapy\",\n      },\n    ],\n  },\n  {\n    _id: \"city\",\n    title: \"City\",\n    options: [\n      {\n        name: \"Mountain View\",\n        _id: \"mountain_view\",\n      },\n      {\n        name: \"Fremont\",\n        _id: \"fremont\",\n      },\n    ],\n  },\n];\nconst getFilters = () => {\n  return filters;\n};\n\nexport default getFilters;\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/searchBox.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/CollapsibleList.jsx",["251","252"],"import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport { TiTick } from \"react-icons/ti\";\n\nclass CollapsibleList extends Component {\n  render() {\n    const {\n      groups,\n      itemKey,\n      onSelect,\n      selectedItems,\n      filterGroups,\n    } = this.props;\n    return (\n      <Accordion defaultActiveKey=\"0\">\n        {groups.map((group) => (\n          <Card key={group._id}>\n            <Accordion.Toggle\n              as={Card.Header}\n              eventKey={group._id}\n              key={group._id}\n            >\n              {group.name}\n            </Accordion.Toggle>\n            {group[itemKey].map((item) => (\n              <Accordion.Collapse eventKey={group._id} key={item._id}>\n                <Card.Body\n                  key={item._id}\n                  onClick={() => onSelect(group._id, item.name)}\n                >\n                  {item.name}\n                  {/* {selectedItems.includes(console.log({ group, item })) && (\n                    <TiTick style={{ float: \"right\" }} />\n                  )} */}\n                  {filterGroups[group._id] == item.name && (\n                    <TiTick style={{ float: \"right\" }} />\n                  )}\n                </Card.Body>\n              </Accordion.Collapse>\n            ))}\n          </Card>\n        ))}\n      </Accordion>\n    );\n  }\n}\n\nexport default CollapsibleList;\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/common/cardDeck.jsx",["253"],"import React, { Component } from \"react\";\nimport CardItem from \"./cardItem\";\nconst CardDeck = (items, smallWindow, button1, button2) => {\n  return (\n    <div>\n      {items.map((item) => CardItem(item, smallWindow, button1, button2))}\n    </div>\n  );\n};\n\nexport default CardDeck;\n","/home/arkyyang/files/webdev/tele_pain_center/src/services/data/providerData.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/common/cardItem.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/UI/Pagination.jsx",["254","255","256"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nconst Pagination = ({\n  itemsCount,\n  pageSize,\n  currentPage,\n  onPageChange,\n  startPage,\n}) => {\n  const pagesCount = Math.ceil(itemsCount / pageSize);\n  if (pagesCount === 1) return null;\n  const pages = _.range(1, pagesCount + 1);\n\n  return (\n    <nav>\n      <ul className=\"pagination\">\n        <li className=\"page-item\">\n          <a\n            className=\"page-link\"\n            aria-label=\"Previous\"\n            onClick={() => onPageChange(currentPage - 1)}\n          >\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span className=\"sr-only\">Previous</span>\n          </a>\n        </li>\n        {pages.map((page) => (\n          <li\n            key={page}\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\n          >\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\n              {startPage + page - 1}\n            </a>\n          </li>\n        ))}\n\n        <li className=\"page-item\">\n          <a\n            className=\"page-link\"\n            aria-label=\"Previous\"\n            onClick={() => onPageChange(currentPage + 1)}\n          >\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span className=\"sr-only\">Next</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nPagination.propTypes = {\n  itemsCount: PropTypes.number.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","/home/arkyyang/files/webdev/tele_pain_center/src/utils/paginate.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/services/authService.js",["257","258","259","260"],"import React from \"react\";\nimport firebase from \"firebase/app\";\nimport { db } from \"./Firebase/firebase\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst user = {\n  currentUser: null,\n};\n\nexport const createNewUser = async ({ email, password, username }) => {\n  const usersRef = db.collection(\"users\");\n  let uid = \"\";\n\n  try {\n    await firebase\n      .createUser({ email, password }, { username, email })\n      .then(function (data) {\n        uid = data.user.uid;\n        usersRef.doc(data.user.uid).set({\n          username: username,\n        });\n      })\n      .catch(function (err) {\n        console.log(\"Failed to create user, \", err);\n        toast(\"Failed to create user, \", err);\n      });\n    await login({ email, password });\n  } catch (err) {\n    console.log(\"Failed to create user, \", err);\n    toast(\"Failed to create user, \", err);\n  }\n  return uid;\n};\n\nexport const createProvider = async ({\n  email,\n  name,\n  password,\n  address1,\n  address2,\n  city,\n  state,\n  zip,\n  organization,\n  description,\n  phone,\n  specialty,\n  image,\n  _geoloc,\n}) => {\n  const providersRef = db.collection(\"providers\");\n\n  const uid = await createNewUser({\n    email: email,\n    password: password,\n    username: name,\n  });\n\n  const providerData = {\n    uid,\n    email,\n    name,\n    address1,\n    address2,\n    city,\n    state,\n    zip,\n    organization,\n    description,\n    phone,\n    specialty,\n    image,\n    _geoloc,\n  };\n\n  try {\n    providersRef.doc(uid).set(providerData);\n    console.log(`provider ${providerData.name} added`);\n  } catch (err) {\n    console.log(\"Failed to create provider, \", err);\n    toast.log(\"Failed to create provider, \", err);\n  }\n};\n\nexport const login = async ({ email, password }) => {\n  //  TODO: check whether logout without cur user is a problem\n  logout();\n  await firebase.login({\n    email,\n    password,\n  });\n};\n\nexport const logout = async () => {\n  await firebase.logout();\n};\n\nexport function GetCurrentUser() {\n  console.log(\"useAuth:\", useAuth);\n  const { currentUser } = useAuth();\n  user = { user: currentUser };\n}\n\nexport default {\n  GetCurrentUser,\n  user,\n};\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Registration.jsx",["261"],"import React, { useRef, useState } from \"react\";\nimport { Card, Button, Form, Container, Alert } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createNewUser, logout } from \"../../services/authService\";\n\nexport default function Registration() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const nameRef = useRef();\n  const passwordConfirmRef = useRef();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const curUid = useSelector((state) => state.firebase.auth.uid);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Password do not match\");\n    }\n\n    try {\n      setError(\"\");\n      setLoading(true); //disable sign up button when waiting\n      await createNewUser({\n        email: emailRef.current.value,\n        password: passwordRef.current.value,\n        username: nameRef.current.value,\n      });\n      setLoading(false);\n      history.push(\"/\");\n    } catch (err) {\n      setError(\"Failed to create an account:\", err); //,\n      setLoading(false);\n    }\n  }\n\n  const renderSignUpForm = () => {\n    return (\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n        <Card>\n          <Card.Body>\n            <h2 className=\"text-center mb-4\"> Sign Up</h2>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <Form onSubmit={handleSubmit}>\n              <Form.Group id=\"email\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control type=\"email\" ref={emailRef} required />\n              </Form.Group>\n              <Form.Group id=\"name\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control type=\"name\" ref={nameRef} required />\n              </Form.Group>\n              <Form.Group id=\"password\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" ref={passwordRef} required />\n              </Form.Group>\n              <Form.Group id=\"password-confirm\">\n                <Form.Label>Password Confirmation</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  ref={passwordConfirmRef}\n                  required\n                />\n              </Form.Group>\n              <Button disabled={loading} className=\"w-100\" type=\"submit\">\n                Sign Up\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n        <div className=\"w-100 text-center mt-2\">\n          {\"Already have an account? \"}\n          <Link to=\"/login\"> Log In</Link>\n        </div>\n      </div>\n    );\n  };\n\n  const renderSignOut = () => {\n    return (\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n        <h3>Already signed in</h3>\n        <Button onClick={() => logout()}>Sign out</Button>\n      </div>\n    );\n  };\n\n  return (\n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      stype={{ minHeight: \"100vh\" }}\n    >\n      {curUid ? renderSignOut() : renderSignUpForm()}\n    </Container>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/contexts/AuthContext.js",["262"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { auth, db } from \"../services/Firebase/firebase\";\nimport * as userActions from \"../redux/UserActions\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n  const [username, setUsername] = useState(\"\");\n  const [uid, setuid] = useState(\"\");\n\n  const [providers, setproviders] = useState([]);\n\n  function signup(email, password) {\n    // line to change if change authentication method\n    auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    // line to change if change authentication method\n    auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  }\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  }\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  }\n\n  function getUsername(uid) {\n    db.collection(\"users\")\n      .doc(uid)\n      .get()\n      .then((doc) => {\n        setUsername(doc.data().username);\n      });\n    return;\n  }\n\n  function getProvider() {\n    const providersRef = db.collection(\"providers\");\n\n    providersRef.get().then(function (querySnapshot) {\n      let data = [];\n      querySnapshot.forEach(function (doc) {\n        // doc.data() is never undefined for query doc snapshots\n        data.push(doc.data());\n      });\n      setproviders(data);\n    });\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setuid(user.uid);\n      getUsername(user.uid);\n      setLoading(false); // do not render until have set current user\n    });\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n    uid,\n    username,\n    getProvider,\n    providers,\n  };\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/services/Firebase/firebase.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Login.jsx",["263","264"],"import React, { useRef, useState } from \"react\";\nimport { Card, Button, Form, Container, Alert } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { login } from \"../../services/authService\";\nimport {\n  GetGroups,\n  GetMessages,\n  SetCurGroup,\n  SendMessages,\n} from \"../../services/ChatService\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function Login() {\n  const dispatch = useDispatch();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const curUid = useSelector((state) => state.firebase.auth.uid);\n  const groups = useSelector((state) => state.chatGroupsState);\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true); //disable sign up button when waiting\n      await login({\n        email: emailRef.current.value,\n        password: passwordRef.current.value,\n      });\n      await GetGroups(dispatch, curUid);\n      if (groups.groups) {\n        console.log({ groups: groups.groups });\n        const curGroupId = Object.keys(groups.groups)[0];\n        SetCurGroup(dispatch, curGroupId);\n      }\n      setLoading(false);\n      history.push(\"/\");\n    } catch {\n      setError(`Failed to log in`);\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      stype={{ minHeight: \"100vh\" }}\n    >\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n        <Card>\n          <Card.Body>\n            <h2 className=\"text-center mb-4\"> Log in</h2>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <Form onSubmit={handleSubmit}>\n              <Form.Group id=\"email\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control type=\"email\" ref={emailRef} required />\n              </Form.Group>\n              <Form.Group id=\"password\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" ref={passwordRef} required />\n              </Form.Group>\n              <Button disabled={loading} className=\"w-100\" type=\"submit\">\n                Log in\n              </Button>\n            </Form>\n            <div className=\"w-100 text-center mt-2\">\n              <Link to=\"/forgot-password\">Forgot Password</Link>\n            </div>\n          </Card.Body>\n        </Card>\n\n        <div className=\"w-100 text-center mt-2\">\n          {\"Need an account? \"}\n          <Link to=\"/registration\">Sign up</Link>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Dashboard.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/common/ProtectedRoute.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/ForgotPassword.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/UpdateProfile.jsx",["265","266"],"import React, { useRef, useState } from \"react\";\nimport { Card, Button, Form, Container, Alert } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nexport default function UpdateProfile() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { currentUser, updateEmail, updatePassword } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Password do not match\");\n    }\n    setLoading(true);\n    setError(\"\");\n    const promises = [];\n    const newEmail = emailRef.current.value;\n    const newPassword = passwordRef.current.value;\n    if (newEmail != currentUser.email) {\n      promises.push(updateEmail(newEmail));\n    }\n    if (newPassword && newPassword != currentUser.password) {\n      promises.push(updatePassword(newPassword));\n    }\n\n    Promise.all(promises)\n      .then(() => {\n        //successful\n        setLoading(false);\n        setError(\"\");\n        history.push(\"/\");\n      })\n      .catch(() => {\n        //error\n        setError(\"Failed to create an account\");\n        setError(\"\");\n        setLoading(false);\n      })\n      .finally(() => {});\n  }\n\n  return (\n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      stype={{ minHeight: \"100vh\" }}\n    >\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n        <Card>\n          <Card.Body>\n            <h2 className=\"text-center mb-4\">Update Profile</h2>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <Form onSubmit={handleSubmit}>\n              <Form.Group id=\"email\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control\n                  type=\"email\"\n                  ref={emailRef}\n                  required\n                  defaultValue={currentUser.email}\n                />\n              </Form.Group>\n              <Form.Group id=\"password\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  ref={passwordRef}\n                  placeholder=\"Leave blank to keep the same\"\n                />\n              </Form.Group>\n              <Form.Group id=\"password-confirm\">\n                <Form.Label>Password Confirmation</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  ref={passwordConfirmRef}\n                  placeholder=\"Leave blank to keep the same\"\n                />\n              </Form.Group>\n              <Button disabled={loading} className=\"w-100\" type=\"submit\">\n                Update\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n        <div className=\"w-100 text-center mt-2\">\n          <Link to=\"/\"> Cancel </Link>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/Chat.jsx",["267","268","269","270","271","272","273","274","275"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Form, FormControl } from \"react-bootstrap\";\nimport Message from \"../common/Message\";\nimport {\n  GetGroups,\n  GetMessages,\n  SetCurGroup,\n  SendMessages,\n} from \"../../services/ChatService\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { BsDot } from \"react-icons/bs\";\nimport { IoSend } from \"react-icons/io5\";\n\nimport \"./Chat.css\";\n\nexport default function Chat(props) {\n  const dispatch = useDispatch();\n  const messages = useSelector((state) => state.messagesState.messages);\n  const messagesLoading = useSelector((state) => state.messagesState.isLoading);\n  const groups = useSelector((state) => state.chatGroupsState);\n  const curGroup = useSelector((state) => state.curGroup.curGroup);\n  const displayName = useSelector((state) => state.firebase.auth.displayname);\n  const curUid = useSelector((state) => state.firebase.auth.uid);\n\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    GetGroups(dispatch, curUid);\n  }, [curUid]);\n\n  useEffect(() => {\n    GetGroups(dispatch, curUid);\n    GetMessages(dispatch, curGroup, 30);\n  }, [curGroup]);\n\n  useEffect(() => {\n    if (!curGroup.curGroup && groups.groups) {\n      const curGroupTemp = Object.values(groups.groups).sort(compareGroup)[0];\n      if (curGroupTemp && !curGroup) {\n        SetCurGroup(dispatch, curGroupTemp._id);\n      }\n    }\n  }, [groups]);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    SendMessages(dispatch, curGroup, curUid, input);\n    setInput(\"\");\n  };\n\n  const renderMessage = () => {\n    return (\n      <section>\n        {messages.length !== 0 &&\n          messages.map((message) => (\n            <Message\n              message={message}\n              name={\n                groups.groups[curGroup] &&\n                groups.groups[curGroup].users[message.uid]\n              }\n              isUser={curUid == message.uid}\n            />\n          ))}\n      </section>\n    );\n  };\n\n  function compareGroup(group1, group2) {\n    if (!group1 || !group2 || !group1[1] || !group2[1]) {\n      return 0;\n    }\n    if (group1[1].data.timestamp.seconds > group2[1].data.seconds) {\n      return 1;\n    }\n    if (group1[1].data.timestamp.seconds < group2[1].data.seconds) {\n      return -1;\n    }\n    return 0;\n  }\n\n  function getContactName(group) {\n    if (!group || !group.users) {\n      return;\n    }\n    const groupMembers = Object.entries(group.users);\n\n    const contact = groupMembers.filter((member) => member[0] != curUid)[0];\n    return contact[1];\n  }\n\n  const renderContact = () => {\n    return (\n      <div className=\"contact-list\">\n        <div className=\"contact-drawer\">\n          {!groups.isLoading &&\n            groups.groups &&\n            Object.values(groups.groups)\n              .sort(compareGroup)\n              .map((group) => (\n                <div\n                  className={`item ${group._id == curGroup ? \"curItem\" : \"\"}`}\n                  onClick={() => SetCurGroup(dispatch, group._id)}\n                >\n                  <BsDot className=\"icon\" />\n                  {getContactName(group)}\n                </div>\n              ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-3 contacts\">\n            <div className=\"header\">Contact List</div>\n            {renderContact()}\n          </div>\n\n          <div className=\"col-md-9 tight\">\n            <div className=\"Chat\">\n              <div className=\"header\">\n                {getContactName(groups.groups[curGroup])}\n              </div>\n              {/* Message */}\n              <div className=\"message-window\">\n                <div className=\"messages\">\n                  {messagesLoading ? \"Retrieving Messages\" : renderMessage()}\n                </div>\n                <div id=\"anchor\"></div>\n              </div>\n              {/* Input */}\n              <form className=\"input-bar\">\n                <FormControl\n                  id=\"userInpuut\"\n                  placeholder=\"Enter Message\"\n                  value={input}\n                  onChange={(event) => setInput(event.target.value)}\n                  className=\"input-box\"\n                />\n                <IoSend\n                  disabled={!input}\n                  type=\"submit\"\n                  onClick={sendMessage}\n                  className=\"send-button\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/common/Message.js",["276","277"],"import React, { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./Message.css\";\n\nexport default function Message(props) {\n  const { message, name, isUser } = props;\n  return (\n    <div>\n      <div\n        key={`div_${message._id}`}\n        className={`message ${isUser && \"message__user\"}`}\n      >\n        <p className=\"name\">{name && name}</p>\n        <Card\n          key={`card_${message._id}`}\n          className={`message__card ${isUser && \"message__card__user\"}`}\n        >\n          {message.text}\n        </Card>\n      </div>\n    </div>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/services/ChatService.js",["278"],"import { db } from \"./Firebase/firebase\";\nimport chatActions from \"../redux/ChatActions\";\nimport firebase from \"firebase/app\";\n\nexport const GetUser = async (uid) => {\n  const usersRef = db.collection(\"users\");\n  let data = {};\n  try {\n    const snapshot = await usersRef.doc(uid).get();\n    data = snapshot.data();\n    return data.username;\n  } catch (err) {}\n};\n\nexport const GetGroups = async (dispatch, uid) => {\n  const groupsRef = db.collection(\"groups\");\n  let groups = {};\n\n  console.log({ uid });\n  try {\n    const groupsSnapShot = await groupsRef\n      .where(\"users\", \"array-contains-any\", [uid])\n      .orderBy(\"timestamp\", \"desc\")\n      .get();\n    groupsSnapShot.forEach(async (doc) => {\n      const users = {};\n      for (const uid of doc.data().users) {\n        users[uid] = await GetUser(uid);\n      }\n      groups[doc.id] = { users, _id: doc.id, data: doc.data() };\n      chatActions.fetchGroups(dispatch, groups);\n    });\n  } catch (err) {\n    console.log(\"Group not retrieved:\", err);\n  }\n\n  return groups;\n};\n\nexport const SetCurGroup = (dispatch, curGroupId) => {\n  chatActions.fetchCurGroup(dispatch, curGroupId);\n  var groupRef = db.collection(\"groups\").doc(curGroupId);\n  try {\n    groupRef.update({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n  } catch (err) {\n    console.log(\"failed to set curGroup on server, \", err);\n  }\n};\n\nexport const CreateGroup = async (dispatch, uid1, uid2) => {\n  console.log({ uid1, uid2 });\n  const groupsRef = db.collection(\"groups\");\n  try {\n    const group = {\n      users: [uid1, uid2],\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    };\n    const groupRef = await groupsRef.add(group);\n    chatActions.fetchCurGroup(dispatch, groupRef.id);\n  } catch (err) {\n    console.log(\"Group not created:\", err);\n  }\n};\n\nexport const GetMessages = async (dispatch, groupId, limit) => {\n  if (!groupId) {\n    chatActions.fetchMessages(dispatch, []);\n    return [];\n  }\n  const groupRef = db.collection(\"groups\").doc(groupId);\n  const messageRef = groupRef.collection(\"messages\");\n  let messages = [];\n  try {\n    messageRef\n      .orderBy(\"timestamp\", \"desc\")\n      .limit(limit)\n      .onSnapshot((snapshot) => {\n        messages = [];\n        snapshot.docs.reverse().map((doc) => {\n          const curObject = doc.data();\n          curObject._id = doc.id;\n          messages.push(curObject);\n          chatActions.fetchMessages(dispatch, messages);\n        });\n      });\n    groupRef.update({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n  } catch (err) {\n    console.log(\"Message not retrieved, \", err);\n  }\n\n  if (!messages.length) {\n    chatActions.fetchMessages(dispatch, messages);\n  }\n\n  return [...messages];\n};\n\nexport const SendMessages = async (dispatch, groupId, uid, text) => {\n  const groupRef = db.collection(\"groups\").doc(groupId).collection(\"messages\");\n  try {\n    const message = {\n      uid: uid,\n      text: text,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    };\n    groupRef.add(message);\n  } catch (err) {\n    console.log(\"Message not sent, \", err);\n  }\n\n  return;\n};\n","/home/arkyyang/files/webdev/tele_pain_center/src/redux/configureStore.js",["279"],"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport { filtersReducer } from \"./filtersReducer\";\nimport { providersReducer } from \"./providersReducer\";\nimport { messagesReducer } from \"./messagesReducer\";\nimport { chatGroupsReducer } from \"./chatGroupsReducer\";\nimport { curGroupReducer } from \"./curGroupReducer\";\nimport { firebaseReducer } from \"react-redux-firebase\";\nimport { dashboardReducer } from \"./reducers/dashboardReducer\"; //test\n\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nexport const ConfigureStore = () => {\n  const store = createStore(\n    combineReducers({\n      providersState: providersReducer,\n      filters: filtersReducer,\n      messagesState: messagesReducer,\n      chatGroupsState: chatGroupsReducer,\n      curGroup: curGroupReducer,\n      firebase: firebaseReducer,\n      dashboardReducer: dashboardReducer, //test\n    }),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  applyMiddleware(thunk, logger);\n  return store;\n};\n","/home/arkyyang/files/webdev/tele_pain_center/src/redux/filtersReducer.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/providersReducer.js",["280"],"/home/arkyyang/files/webdev/tele_pain_center/src/services/data/filtersData.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/ActionTypes.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/common/Loading.jsx",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/ProvidersActions.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/ProvidersActionCreators.js",["281","282"],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/messagesReducer.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/chatGroupsReducer.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/ChatActions.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/ChatActionCreator.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/curGroupReducer.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/UserActions.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/UserActionCreator.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/NewProvider.jsx",["283","284","285","286","287","288","289"],"import React, { useRef, useState } from \"react\";\nimport { Card, Button, Form, Container, Alert, Col } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createProvider } from \"../../services/authService\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport { generateProviders } from \"../../services/data/dummyDataGenerator\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport default function Registration() {\n  const emailRef = useRef();\n  const nameRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const address1Ref = useRef();\n  const address2Ref = useRef();\n  const cityRef = useRef();\n  const stateRef = useRef();\n  const zipRef = useRef();\n  const organizationRef = useRef();\n  const descriptionRef = useRef();\n  const phoneRef = useRef();\n  const specialtyRef = useRef();\n  const imageRef = useRef();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const generate = async () => {\n    const providers = generateProviders(false);\n    for (let provider of providers) {\n      await createProvider(provider);\n    }\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    // if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n    //   return setError(\"Password do not match\");\n    // }\n\n    try {\n      setError(\"\");\n      setLoading(true); //disable sign up button when waiting\n      await createProvider({\n        email: emailRef.current.value,\n        password: passwordRef.current.value,\n        name: nameRef.current.value,\n        address1: address1Ref.current.value,\n        address2: address2Ref.current.value,\n        city: cityRef.current.value,\n        state: stateRef.current.value,\n        zip: zipRef.current.value,\n        organization: organizationRef.current.value,\n        description: descriptionRef.current.value,\n        phone: phoneRef.current.value,\n        specialty: specialtyRef.current.value,\n        image: imageRef.current.value,\n      });\n\n      setLoading(false);\n\n      // history.push(\"/\");\n    } catch (err) {\n      setError(\"Failed to create an account:\", err); //,\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      stype={{ minHeight: \"100vh\" }}\n    >\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n        <Card>\n          <Card.Body>\n            <h2 className=\"text-center mb-4\"> New Health Provider Sign Up</h2>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <Form onSubmit={handleSubmit}>\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formGridName\" required>\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type=\"name\"\n                    ref={nameRef}\n                    placeholder=\"Enter name\"\n                  />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formGridOrganization\" required>\n                  <Form.Label>Organization</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    ref={organizationRef}\n                    placeholder=\"Organization\"\n                  />\n                </Form.Group>\n              </Form.Row>\n\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formGridEmail\" required>\n                  <Form.Label>Email</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    ref={emailRef}\n                    placeholder=\"Enter email\"\n                  />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formGridPassword\" required>\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    ref={passwordRef}\n                    placeholder=\"Password\"\n                  />\n                </Form.Group>\n              </Form.Row>\n\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formGridPhone\" required>\n                  <Form.Label>Phone Number</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    ref={phoneRef}\n                    placeholder=\"0000000000\"\n                  />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formGridspecialty\" required>\n                  <Form.Label>Specialty</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    ref={specialtyRef}\n                  >\n                    <option>Fibromyalgia</option>\n                    <option>Arthritis</option>\n                    <option>Pain Psychology</option>\n                    <option>Physical Therapy</option>\n                    <option>Occupational Therapy</option>\n                  </Form.Control>\n                </Form.Group>\n              </Form.Row>\n\n              <Form.Group controlId=\"formGridAddress1\" required>\n                <Form.Label>Address</Form.Label>\n                <Form.Control placeholder=\"1234 Main St\" ref={address1Ref} />\n              </Form.Group>\n\n              <Form.Group controlId=\"formGridAddress2\" required>\n                <Form.Label>Address 2</Form.Label>\n                <Form.Control\n                  placeholder=\"Apartment, studio, or floor\"\n                  ref={address2Ref}\n                />\n              </Form.Group>\n\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formGridCity\" required>\n                  <Form.Label>City</Form.Label>\n                  <Form.Control ref={cityRef} />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formGridState\" required>\n                  <Form.Label>State</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    ref={stateRef}\n                  >\n                    <option>CA</option>\n                    <option>OR</option>\n                    <option>AZ</option>\n                    <option>TX</option>\n                  </Form.Control>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formGridZip\" required>\n                  <Form.Label>Zip</Form.Label>\n                  <Form.Control type=\"number\" ref={zipRef} />\n                </Form.Group>\n              </Form.Row>\n\n              <Form.Group controlId=\"formGriddescription\" required>\n                <Form.Label>Description</Form.Label>\n                <Form.Control ref={descriptionRef} placeholder=\"About me\" />\n              </Form.Group>\n\n              <Form.Group controlId=\"formGridImagr\" required>\n                <Form.Label>Image URL</Form.Label>\n                <Form.Control ref={imageRef} placeholder=\"Image URL\" />\n              </Form.Group>\n\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n        <div className=\"w-100 text-center mt-2\">\n          {\"Already have an account? \"}\n          <Link to=\"/login\"> Log In</Link>\n        </div>\n      </div>\n      <Button variant=\"primary\" onClick={() => generate()}>\n        Generate\n      </Button>\n    </Container>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/redux/reducers/index.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/reducers/dashboardReducer.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/redux/actions/dashboardAction.js",[],"/home/arkyyang/files/webdev/tele_pain_center/src/services/data/dummyDataGenerator.js",["290"],"import _ from \"lodash\";\n\nconst names = [\n  \"Yamilet Kemp\",\n  \"Hazel Pearson\",\n  \"Cailyn Tucker\",\n  \"Odin Howe\",\n  \"Robert Barry\",\n  \"Ashley Fisher\",\n  \"Desiree Avila\",\n  \"Jayson Bond\",\n  \"Jayden Wilkins\",\n  \"Alondra Chase\",\n  \"Kason Calderon\",\n  \"Wesley Morrison\",\n  \"Haven Brooks\",\n  \"Michael Fox\",\n  \"Braxton Miller\",\n  \"Marcos Whitaker\",\n  \"Noemi Patel\",\n  \"Genevieve Russo\",\n  \"Tyrell Bowen\",\n  \"Shea Byrd\",\n  \"Bradley Acosta\",\n  \"Bria Lloyd\",\n  \"Jason Robinson\",\n  \"Kamden Reid\",\n  \"Sabrina Norman\",\n  \"Cynthia Henry\",\n  \"Malachi Francis\",\n  \"Serena Barton\",\n  \"Trevor Bender\",\n  \"Aleena Chaney\",\n  \"Rayne Horn\",\n  \"Olive Glass\",\n  \"Jaliyah Le\",\n  \"Jessie Wolfe\",\n  \"Leah Rojas\",\n  \"Cooper Richard\",\n  \"Stella Gibbs\",\n  \"Konnor Spencer\",\n  \"Randy Holt\",\n  \"Moriah Collins\",\n  \"Jordan Strickland\",\n  \"Connor Juarez\",\n  \"Joanna Ponce\",\n  \"Carina Pugh\",\n  \"Gideon Thomas\",\n  \"Ellie Lopez\",\n  \"Michael Gonzalez\",\n  \"Tyson Gutierrez\",\n  \"John Randolph\",\n  \"Ian Stephens\",\n  \"Dalia Bond\",\n  \"Alyson Boone\",\n  \"Maxim Chandler\",\n  \"Wayne Owen\",\n  \"Jerimiah Yu\",\n  \"Case Herman\",\n  \"Adeline Mercado\",\n  \"Semaj Golden\",\n  \"Aurora Alexander\",\n  \"Jaylon Lambert\",\n  \"Cade Castillo\",\n  \"Sebastian Garrett\",\n];\n\nconst specialties = [\n  \"Fibromyalgia\",\n  \"Arthritis\",\n  \"Pain Psychology\",\n  \"Physical Therapy\",\n  \"Occupational Therapy\",\n];\n\nconst organizations = [\n  \"Anderson Inc Clinic\",\n  \"Hoeger - Blick Hospital\",\n  \"Heidenreich, Hand and Waelchi Clinic\",\n  \"Wiza - Lang Clinic\",\n  \"Heaney, Stracke and Farrell Hospital\",\n  \"Feil Group Clinic\",\n  \"Erdman, Lowe and Zemlak Hospital\",\n  \"Gleason, Ortiz and Schumm Clinic\",\n];\n\nconst greetings = [\n  \"I care for patients.\",\n  \"Experienced and professional.\",\n  \"Your health is my highest priority.\",\n];\n\nconst addresses = [\n  {\n    city: \"Fremont\",\n    state: \"CA\",\n    address1: \"40000 Paseo Padre Pkwy\",\n    address2: \"\",\n    zip: \"94538\",\n    _geoloc: { lat: 37.548305301878145, lng: -121.96565297683523 },\n  },\n  {\n    city: \"Fremont\",\n    state: \"CA\",\n    address1: \"1000 Pine St\",\n    address2: \"\",\n    zip: \"94539\",\n    _geoloc: { lat: 37.52270772171007, lng: -121.92472453874225 },\n  },\n  {\n    city: \"Mountain View\",\n    state: \"CA\",\n    address1: \"680 Barbara Ave\",\n    address2: \"\",\n    zip: \"94040\",\n    _geoloc: { lat: 37.38495779213348, lng: -122.0852279681612 },\n  },\n  {\n    city: \"Mountain View\",\n    state: \"CA\",\n    address1: \"1500 Charleston Rd\",\n    address2: \"\",\n    zip: \"94043\",\n    _geoloc: { lat: 37.430228143135366, lng: -122.08385467716393 },\n  },\n];\n\nconst images = [\n  \"https://cdn.pixabay.com/photo/2016/08/10/20/26/stethoscope-1584223__340.jpg\",\n  \"https://cdn.pixabay.com/photo/2017/03/14/03/20/nurse-2141808__340.jpg\",\n  \"https://cdn.pixabay.com/photo/2016/01/19/15/05/doctor-1149149__340.jpg\",\n  \"https://cdn.pixabay.com/photo/2017/01/29/21/16/nurse-2019420__340.jpg\",\n  \"https://cdn.pixabay.com/photo/2019/07/30/15/57/dentist-4373290__340.jpg\",\n  \"https://cdn.pixabay.com/photo/2016/02/08/23/36/isolated-1188036__340.png\",\n  \"https://cdn.pixabay.com/photo/2017/09/06/20/36/doctor-2722941__340.jpg\",\n];\n\nconst name2Email = (name) => {\n  const splitted = name.toLowerCase().split(\" \");\n  const email = splitted[0] + \"@\" + splitted[1] + \".com\";\n  return email;\n};\n\nconst generatePhoneNumber = () => {\n  return Math.random().toString().slice(2, 11);\n};\n\nconst descriptionGenerator = (specialty, greeting) => {\n  const description = \"I specialize in \" + specialty + \".\" + greeting;\n  return description;\n};\n\nconst generateProvider = (name) => {\n  const specialty = _.sample(specialties);\n  const organization = _.sample(organizations);\n  const greeting = _.sample(greetings);\n  const address = _.sample(addresses);\n  const image = _.sample(images);\n  return {\n    email: name2Email(name),\n    name,\n    password: \"123456\",\n    organization,\n    description: descriptionGenerator(specialty, greeting),\n    phone: generatePhoneNumber(),\n    specialty,\n    image,\n    ...address,\n  };\n};\n\nexport const generateProviders = (test) => {\n  const res = [];\n  for (let name of names.slice(1, 30)) {\n    res.push(generateProvider(name));\n  }\n  if (test == true) return [res[0]];\n  return res;\n};\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/ProvidersMap.jsx",["291"],"import React, { useEffect, useState } from \"react\";\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n  InfoWindow,\n} from \"react-google-maps\";\nimport MarkerClusterer from \"react-google-maps/lib/components/addons/MarkerClusterer\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Map() {\n  const providersState = useSelector((state) => state.providersState);\n  const [selected, setSelected] = useState(null);\n  const [center, setCenter] = useState({\n    lat: 0,\n    lng: 0,\n  });\n\n  useEffect(() => {\n    try {\n      const newCenter = providersState.providers[0]._geoloc;\n      setCenter(newCenter);\n    } catch (e) {}\n  }, [providersState]);\n\n  const onMarkerClustererClick = (markerClusterer) => {\n    const clickedMarkers = markerClusterer.getMarkers();\n    console.log(`Current clicked markers length: ${clickedMarkers.length}`);\n    console.log(clickedMarkers);\n  };\n\n  //TODO: deal with overlapping markers (marker cluster?) https://developers.google.com/maps/documentation/javascript/marker-clustering\n  return (\n    <GoogleMap defaultZoom={10} center={center}>\n      <MarkerClusterer\n        onClick={() => onMarkerClustererClick}\n        averageCenter\n        enableRetinaIcons\n        gridSize={5}\n      >\n        {providersState &&\n          providersState.providers.map((provider) => (\n            <Marker\n              key={provider._id}\n              position={{\n                lat: provider._geoloc.lat,\n                lng: provider._geoloc.lng,\n              }}\n              onClick={() => setSelected(provider)}\n              label={provider.index.toString()}\n            />\n          ))}\n      </MarkerClusterer>\n      {selected && (\n        <InfoWindow\n          position={{ lat: selected._geoloc.lat, lng: selected._geoloc.lng }}\n          onCloseClick={() => {\n            setSelected(null);\n          }}\n        >\n          <div style={{ color: \"black\" }}>\n            <h4>{selected.name}</h4>\n            <p>{selected.specialty}</p>\n            <p>{selected.description}</p>\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\nexport default function ProvidersMap() {\n  const googleMapURL = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_APIKEY}`;\n  return (\n    <div>\n      <WrappedMap\n        googleMapURL={`${googleMapURL}`}\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `400px` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n  );\n}\n","/home/arkyyang/files/webdev/tele_pain_center/src/components/pages/AppointmentModal.jsx",["292","293"],"/home/arkyyang/files/webdev/tele_pain_center/src/services/AppointmentService.js",["294"],{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","severity":1,"message":"300","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"300","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"303","line":3,"column":10,"nodeType":"301","messageId":"302","endLine":3,"endColumn":14},{"ruleId":"299","severity":1,"message":"304","line":8,"column":8,"nodeType":"301","messageId":"302","endLine":8,"endColumn":18},{"ruleId":"299","severity":1,"message":"305","line":16,"column":10,"nodeType":"301","messageId":"302","endLine":16,"endColumn":12},{"ruleId":"299","severity":1,"message":"306","line":21,"column":10,"nodeType":"301","messageId":"302","endLine":21,"endColumn":19},{"ruleId":"299","severity":1,"message":"307","line":35,"column":9,"nodeType":"301","messageId":"302","endLine":35,"endColumn":17},{"ruleId":"299","severity":1,"message":"308","line":43,"column":27,"nodeType":"301","messageId":"302","endLine":43,"endColumn":45},{"ruleId":"299","severity":1,"message":"309","line":55,"column":20,"nodeType":"301","messageId":"302","endLine":55,"endColumn":31},{"ruleId":"299","severity":1,"message":"310","line":64,"column":19,"nodeType":"301","messageId":"302","endLine":64,"endColumn":29},{"ruleId":"311","severity":1,"message":"312","line":88,"column":6,"nodeType":"313","endLine":88,"endColumn":8,"suggestions":"314"},{"ruleId":"311","severity":1,"message":"315","line":99,"column":6,"nodeType":"313","endLine":99,"endColumn":54,"suggestions":"316"},{"ruleId":"311","severity":1,"message":"317","line":103,"column":6,"nodeType":"313","endLine":103,"endColumn":14,"suggestions":"318"},{"ruleId":"311","severity":1,"message":"319","line":126,"column":6,"nodeType":"313","endLine":126,"endColumn":22,"suggestions":"320"},{"ruleId":"321","severity":1,"message":"322","line":146,"column":33,"nodeType":"323","messageId":"324","endLine":146,"endColumn":35},{"ruleId":"321","severity":1,"message":"322","line":156,"column":15,"nodeType":"323","messageId":"324","endLine":156,"endColumn":17},{"ruleId":"311","severity":1,"message":"325","line":24,"column":6,"nodeType":"313","endLine":24,"endColumn":8,"suggestions":"326"},{"ruleId":"299","severity":1,"message":"327","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":16},{"ruleId":"299","severity":1,"message":"328","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"329","line":12,"column":7,"nodeType":"301","messageId":"302","endLine":12,"endColumn":20},{"ruleId":"321","severity":1,"message":"330","line":36,"column":44,"nodeType":"323","messageId":"324","endLine":36,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":26},{"ruleId":"331","severity":1,"message":"332","line":20,"column":11,"nodeType":"333","endLine":24,"endColumn":12},{"ruleId":"331","severity":1,"message":"332","line":34,"column":13,"nodeType":"333","endLine":34,"endColumn":73},{"ruleId":"331","severity":1,"message":"332","line":41,"column":11,"nodeType":"333","endLine":45,"endColumn":12},{"ruleId":"299","severity":1,"message":"328","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"334","line":5,"column":10,"nodeType":"301","messageId":"302","endLine":5,"endColumn":24},{"ruleId":"335","severity":1,"message":"336","line":103,"column":3,"nodeType":"301","messageId":"337","endLine":103,"endColumn":7},{"ruleId":"338","severity":1,"message":"339","line":106,"column":1,"nodeType":"340","endLine":109,"endColumn":3},{"ruleId":"299","severity":1,"message":"341","line":4,"column":23,"nodeType":"301","messageId":"302","endLine":4,"endColumn":34},{"ruleId":"299","severity":1,"message":"342","line":3,"column":13,"nodeType":"301","messageId":"302","endLine":3,"endColumn":24},{"ruleId":"299","severity":1,"message":"343","line":7,"column":3,"nodeType":"301","messageId":"302","endLine":7,"endColumn":14},{"ruleId":"299","severity":1,"message":"344","line":9,"column":3,"nodeType":"301","messageId":"302","endLine":9,"endColumn":15},{"ruleId":"321","severity":1,"message":"322","line":25,"column":18,"nodeType":"323","messageId":"324","endLine":25,"endColumn":20},{"ruleId":"321","severity":1,"message":"322","line":28,"column":36,"nodeType":"323","messageId":"324","endLine":28,"endColumn":38},{"ruleId":"299","severity":1,"message":"345","line":2,"column":10,"nodeType":"301","messageId":"302","endLine":2,"endColumn":16},{"ruleId":"299","severity":1,"message":"346","line":2,"column":18,"nodeType":"301","messageId":"302","endLine":2,"endColumn":22},{"ruleId":"299","severity":1,"message":"347","line":23,"column":9,"nodeType":"301","messageId":"302","endLine":23,"endColumn":20},{"ruleId":"311","severity":1,"message":"317","line":30,"column":6,"nodeType":"313","endLine":30,"endColumn":14,"suggestions":"348"},{"ruleId":"311","severity":1,"message":"349","line":35,"column":6,"nodeType":"313","endLine":35,"endColumn":16,"suggestions":"350"},{"ruleId":"311","severity":1,"message":"351","line":44,"column":6,"nodeType":"313","endLine":44,"endColumn":14,"suggestions":"352"},{"ruleId":"321","severity":1,"message":"330","line":63,"column":30,"nodeType":"323","messageId":"324","endLine":63,"endColumn":32},{"ruleId":"321","severity":1,"message":"322","line":89,"column":63,"nodeType":"323","messageId":"324","endLine":89,"endColumn":65},{"ruleId":"321","severity":1,"message":"330","line":103,"column":48,"nodeType":"323","messageId":"324","endLine":103,"endColumn":50},{"ruleId":"299","severity":1,"message":"353","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":26},{"ruleId":"299","severity":1,"message":"354","line":1,"column":28,"nodeType":"301","messageId":"302","endLine":1,"endColumn":36},{"ruleId":"355","severity":1,"message":"356","line":81,"column":43,"nodeType":"357","messageId":"358","endLine":81,"endColumn":45},{"ruleId":"299","severity":1,"message":"359","line":1,"column":57,"nodeType":"301","messageId":"302","endLine":1,"endColumn":64},{"ruleId":"299","severity":1,"message":"306","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":19},{"ruleId":"299","severity":1,"message":"306","line":2,"column":10,"nodeType":"301","messageId":"302","endLine":2,"endColumn":19},{"ruleId":"299","severity":1,"message":"360","line":4,"column":8,"nodeType":"301","messageId":"302","endLine":4,"endColumn":20},{"ruleId":"299","severity":1,"message":"361","line":4,"column":10,"nodeType":"301","messageId":"302","endLine":4,"endColumn":21},{"ruleId":"299","severity":1,"message":"341","line":4,"column":23,"nodeType":"301","messageId":"302","endLine":4,"endColumn":34},{"ruleId":"299","severity":1,"message":"334","line":6,"column":10,"nodeType":"301","messageId":"302","endLine":6,"endColumn":24},{"ruleId":"299","severity":1,"message":"362","line":6,"column":26,"nodeType":"301","messageId":"302","endLine":6,"endColumn":31},{"ruleId":"299","severity":1,"message":"363","line":16,"column":9,"nodeType":"301","messageId":"302","endLine":16,"endColumn":27},{"ruleId":"299","severity":1,"message":"364","line":28,"column":10,"nodeType":"301","messageId":"302","endLine":28,"endColumn":17},{"ruleId":"299","severity":1,"message":"365","line":29,"column":9,"nodeType":"301","messageId":"302","endLine":29,"endColumn":16},{"ruleId":"321","severity":1,"message":"330","line":177,"column":12,"nodeType":"323","messageId":"324","endLine":177,"endColumn":14},{"ruleId":"299","severity":1,"message":"341","line":11,"column":23,"nodeType":"301","messageId":"302","endLine":11,"endColumn":34},{"ruleId":"299","severity":1,"message":"353","line":1,"column":27,"nodeType":"301","messageId":"302","endLine":1,"endColumn":36},{"ruleId":"299","severity":1,"message":"341","line":4,"column":23,"nodeType":"301","messageId":"302","endLine":4,"endColumn":34},{"ruleId":"299","severity":1,"message":"334","line":3,"column":10,"nodeType":"301","messageId":"302","endLine":3,"endColumn":24},"no-native-reassign",["366"],"no-negated-in-lhs",["367"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'getFilters' is defined but never used.","'db' is defined but never used.","'PROVIDERS' is defined but never used.","'curGroup' is assigned a value but never used.","'setSelectedFilters' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'setButton1' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'filterGroups', 'pageSize', 'providersState.terminals', and 'searchQuery'. Either include them or remove the dependency array.","ArrayExpression",["368"],"React Hook useEffect has missing dependencies: 'dispatch', 'providersState.terminals', and 'searchQuery'. Either include them or remove the dependency array.",["369"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["370"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["371"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'callApi'. Either include it or remove the dependency array.",["372"],"'Tracking' is defined but never used.","'React' is defined but never used.","'selectedItems' is assigned a value but never used.","Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ToastContainer' is defined but never used.","no-const-assign","'user' is constant.","const","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useDispatch' is defined but never used.","'userActions' is defined but never used.","'GetMessages' is defined but never used.","'SendMessages' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'displayName' is assigned a value but never used.",["373"],"React Hook useEffect has missing dependencies: 'curUid' and 'dispatch'. Either include them or remove the dependency array.",["374"],"React Hook useEffect has missing dependencies: 'curGroup' and 'dispatch'. Either include them or remove the dependency array.",["375"],"'useEffect' is defined but never used.","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'compose' is defined but never used.","'GetProviders' is defined but never used.","'useSelector' is defined but never used.","'toast' is defined but never used.","'passwordConfirmRef' is assigned a value but never used.","'loading' is assigned a value but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"380","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},"Update the dependencies array to be: [dispatch, filterGroups, pageSize, providersState.terminals, searchQuery]",{"range":"391","text":"392"},"Update the dependencies array to be: [filterGroups, pageSize, isAppointmentModalOpen, dispatch, providersState.terminals, searchQuery]",{"range":"393","text":"394"},"Update the dependencies array to be: [curUid, dispatch]",{"range":"395","text":"396"},"Update the dependencies array to be: [groups, curUid, history, dispatch]",{"range":"397","text":"398"},"Update the dependencies array to be: [callApi]",{"range":"399","text":"400"},{"range":"401","text":"396"},"Update the dependencies array to be: [curGroup, curUid, dispatch]",{"range":"402","text":"403"},"Update the dependencies array to be: [curGroup, dispatch, groups]",{"range":"404","text":"405"},[2884,2886],"[dispatch, filterGroups, pageSize, providersState.terminals, searchQuery]",[3068,3116],"[filterGroups, pageSize, isAppointmentModalOpen, dispatch, providersState.terminals, searchQuery]",[3178,3186],"[curUid, dispatch]",[3762,3778],"[groups, curUid, history, dispatch]",[662,664],"[callApi]",[1026,1034],[1137,1147],"[curGroup, curUid, dispatch]",[1404,1412],"[curGroup, dispatch, groups]"]